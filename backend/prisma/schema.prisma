generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  enrollments Enrollment[]
  courses     Course[]     @relation("CourseInstructor")
  progress    Progress[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  thumbnail   String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  instructorId String
  instructor   User     @relation("CourseInstructor", fields: [instructorId], references: [id])
  modules      Module[]
  enrollments  Enrollment[]

  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@map("modules")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String?
  muxAssetId  String?
  muxPlaybackId String?
  duration    Int?     // em segundos
  order       Int
  isFree      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  moduleId String
  module   Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@map("lessons")
}

model Enrollment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relacionamentos
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id          String   @id @default(cuid())
  isCompleted Boolean  @default(false)
  watchedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
  @@map("progress")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}
